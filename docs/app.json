[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny import App, ui, render, reactive\nfrom shinywidgets import output_widget, render_widget\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\n\npenguins_df = load_penguins()\n\n# Define UI\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.h2(\"Sidebar\"),\n            ui.input_selectize(\n                \"selected_attribute\",\n                \"Choose a column:\",\n                [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n            ),\n            ui.input_numeric(\n                \"plotly_bin_count\",\n                \"Plotly Bin Count\",\n                10\n            ),\n            ui.input_slider(\n                \"seaborn_bin_count\",\n                \"Seaborn Bin Count\",\n                1,\n                100,\n                5\n            ),\n            ui.input_checkbox_group(\n                \"selected_species_list\",\n                \"Selected Species List\",\n                [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                inline=True\n            ),\n            ui.hr(),\n            ui.a(\n                \"GitHub\",\n                href=\"https://github.com/tmartin-m/cintel-02-data/blob/main/app.py\",\n                target=\"_blank\"\n            )\n        ),\n        ui.layout_columns(\n            ui.output_data_frame(\"penguin_data_table\"),\n            ui.output_data_frame(\"penguin_data_grid\")\n        ),\n        ui.layout_columns(\n            output_widget(\"plotly_histogram\"),\n            ui.output_plot(\"seaborn_hist\"),\n        ),\n        ui.card(\n            ui.card_header(\"Plotly Scatterplot: Species\"),\n            output_widget(\"plotly_scatterplot\"),\n            full_screen=True\n        )\n    )\n)\n\n# Define Server\ndef server(input, output, session):\n\n    # --------------------------------------------------------\n    # Reactive calculation to filter the data\n    # --------------------------------------------------------\n\n    @reactive.calc\n    def filtered_data():\n        # Drop rows with NA in the selected attribute\n        df = penguins_df.dropna(subset=[input.selected_attribute()])\n        # Filter by species selected\n        df = df[df[\"species\"].isin(input.selected_species_list())]\n        return df\n\n    @output\n    @render.data_frame\n    def penguin_data_table():\n        return render.DataTable(filtered_data())\n\n    @output\n    @render.data_frame\n    def penguin_data_grid():\n        return render.DataGrid(filtered_data())\n\n    @output\n    @render_widget\n    def plotly_histogram():\n        fig = px.histogram(\n            data_frame=filtered_data(),\n            x=input.selected_attribute(),\n            color=\"species\",\n            barmode=\"overlay\",\n            nbins=input.plotly_bin_count(),\n            title=f\"Histogram of {input.selected_attribute()} by Species\"\n        )\n        return fig\n\n    @output\n    @render.plot\n    def seaborn_hist():\n        plt.figure(figsize=(8, 4))\n        sns.histplot(\n            data=filtered_data(),\n            x=input.selected_attribute(),\n            hue=\"species\",\n            multiple=\"layer\",\n            bins=input.seaborn_bin_count()\n        )\n        plt.title(f\"Seaborn Histogram of {input.selected_attribute()} by Species\")\n        plt.xlabel(input.selected_attribute())\n        plt.ylabel(\"Count\")\n        return plt.gcf()\n\n    @output\n    @render_widget\n    def plotly_scatterplot():\n        df = penguins_df.dropna(subset=[input.selected_attribute(), \"body_mass_g\"])\n        fig = px.scatter(\n            df,\n            x=input.selected_attribute(),\n            y=\"body_mass_g\",\n            color=\"species\",\n            title=f\"Scatterplot: {input.selected_attribute()} vs Body Mass\"\n        )\n        return fig\n\n# Launch the app\napp = App(app_ui, server)\n", "type": "text"}]